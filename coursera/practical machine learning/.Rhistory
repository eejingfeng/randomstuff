cat(paste("ID:", unique(x@id)),"\n")
as.data.frame(cbind(visit=x@visit,room=x@room,value=x@value),stringsAsFactors = FALSE) %>%
mutate(value = as.numeric(value)) %>%
group_by(visit,room) %>%
summarise(avg = mean(value)) %>%
spread(room,avg)
})
# visit_class Class and Methods
setClass("visit_class",
representation(id = "numeric",
visit = "numeric",
room = "character",
value = "numeric",
timepoint = "numeric"))
setMethod("room",
c(x = "visit_class"),
function(x,n){
new("room_class", id = x@id[x@room == n], visit = x@visit[x@room == n],
room = x@room[x@room == n], value = x@value[x@room == n],
timepoint = x@timepoint[x@room == n])
})
# room_class Class and Methods
setClass("room_class",
representation(id = "numeric",
visit = "numeric",
room = "character",
value = "numeric",
timepoint = "numeric"))
setMethod("print",
c(x = "room_class"),
function(x){
cat(paste("ID:", unique(x@id)),"\n")
cat(paste("Visit:",unique(x@visit)),"\n")
cat(paste("Room:",unique(x@room)))
})
setMethod("summary",
c(object = "room_class"),
function(object){
new("room_summary", id = object@id, value = object@value)
})
# room_summary Class and Methods
setClass("room_summary",
representation(id = "numeric",
value = "numeric"))
setMethod("print",
c(x = "room_summary"),
function(x){
cat(paste("ID:", unique(x@id)),"\n")
summary(x@value)
})
x <- make_LD(df)
setGeneric("print")
setGeneric("summary")
setGeneric("subject", function(x,...){standardGeneric("subject")})
setGeneric("visit", function(x,...){standardGeneric("visit")})
setGeneric("room", function(x,...){standardGeneric("room")})
#LongitudinalData Class, methods
setClass("LongitudinalData", slots = c(id = "numeric", visit = "numeric", room = "character", value = "numeric", timepoint = "numeric"))
setMethod("print", c(x = "LongitudinalData"),
function(x){paste("Longitudinal dataset with", length(unique(x@id)), "subjects")})
setMethod("subject", c(x = "LongitudinalData"),
function(x,n){new("subject_class",
id = x@id[x@id == n],
visit = x@visit[x@id == n],
room = x@room[x@id == n],
value = x@value[x@id == n],
timepoint = x@timepoint[x@id == n])})
#Subject class, methods
setClass("subject_class", slots=c(id = "numeric", visit = "numeric", room = "character", value = "numeric", timepoint = "numeric"))
setMethod("print", c(x = "subject_class"),
function(x){if(length(unique(x@id)) > 0)
{cat(paste("Subject ID:",unique(x@id)))}
else{NULL}})
setMethod("summary", c(object = "subject_class"),
function(object){new("subject_summary",
id = object@id,
visit = object@visit,
room = object@room,
value = object@value)})
setMethod("visit", c(x = "subject_class"),
function(x,n){new("visit_class",
id = x@id[x@visit == n],
visit = x@visit[x@visit == n],
room = x@room[x@visit == n],
value = x@value[x@visit == n],
timepoint = x@timepoint[x@visit == n])})
# subject_summary class, methods
setClass("subject_summary", slots = c(id = "numeric", visit = "numeric", room = "character", value = "numeric"))
setMethod("print", c(x = "subject_summary"),
function(x){cat(paste("ID:",
unique(x@id)),
"\n")
as.data.frame(cbind(visit=x@visit,room=x@room,value=x@value),stringsAsFactors = FALSE) %>%
mutate(value = as.numeric(value)) %>%
group_by(visit,room) %>%
summarise(avg = mean(value)) %>%
spread(room,avg)})
#visit_class class, methods
setClass("visit_class", slots = c(id = "numeric", visit = "numeric", room = "character", value = "numeric", timepoint = "numeric"))
setMethod("room", c(x = "visit_class"),
function(x,n){new("room_class",
id = x@id[x@room == n],
visit = x@visit[x@room == n],
room = x@room[x@room == n],
value = x@value[x@room == n],
timepoint = x@timepoint[x@room == n])})
#Room_class class, methods
setClass("room_class", slots = c(id = "numeric", visit = "numeric", room = "character", value = "numeric", timepoint = "numeric"))
setMethod("print", c(x = "room_class"),
function(x){cat(paste("ID:", unique(x@id)),"\n")
cat(paste("Visit:",unique(x@visit)),"\n")
cat(paste("Room:",unique(x@room)))})
setMethod("summary", c(object = "room_class"), function(object){new("room_summary", id = object@id, value = object@value)})
#Room_summary class, methods
setClass("room_summary", slots = c(id = "numeric", value = "numeric"))
setMethod("print", c(x = "room_summary"),
function(x){cat(paste("ID:",  unique(x@id)),"\n")
summary(x@value)})
make_LD <- function(x) {new("LongitudinalData",
id = x$id,
visit = x$visit,
room = x$room,
value = x$value,
timepoint = x$timepoint)}
df <- read.csv("C:/Users/eejin/Desktop/oop data/data/MIE.csv")
summary(df)
lapply(df,class)
setGeneric("print")
setGeneric("summary")
setGeneric("subject", function(x,...){standardGeneric("subject")})
setGeneric("visit", function(x,...){standardGeneric("visit")})
setGeneric("room", function(x,...){standardGeneric("room")})
#LongitudinalData Class, methods
setClass("LongitudinalData", slots = c(id = "numeric", visit = "numeric", room = "character", value = "numeric", timepoint = "numeric"))
setMethod("print", c(x = "LongitudinalData"),
function(x){paste("Longitudinal dataset with", length(unique(x@id)), "subjects")})
setMethod("subject", c(x = "LongitudinalData"),
function(x,n){new("subject_class",
id = x@id[x@id == n],
visit = x@visit[x@id == n],
room = x@room[x@id == n],
value = x@value[x@id == n],
timepoint = x@timepoint[x@id == n])})
#Subject class, methods
setClass("subject_class", slots=c(id = "numeric", visit = "numeric", room = "character", value = "numeric", timepoint = "numeric"))
setMethod("print", c(x = "subject_class"),
function(x){if(length(unique(x@id)) > 0)
{cat(paste("Subject ID:",unique(x@id)))}
else{NULL}})
setMethod("summary", c(object = "subject_class"),
function(object){new("subject_summary",
id = object@id,
visit = object@visit,
room = object@room,
value = object@value)})
setMethod("visit", c(x = "subject_class"),
function(x,n){new("visit_class",
id = x@id[x@visit == n],
visit = x@visit[x@visit == n],
room = x@room[x@visit == n],
value = x@value[x@visit == n],
timepoint = x@timepoint[x@visit == n])})
# subject_summary class, methods
setClass("subject_summary", slots = c(id = "numeric", visit = "numeric", room = "character", value = "numeric"))
setMethod("print", c(x = "subject_summary"),
function(x){cat(paste("ID:",
unique(x@id)),
"\n")
as.data.frame(cbind(visit=x@visit,room=x@room,value=x@value),stringsAsFactors = FALSE) %>%
mutate(value = as.numeric(value)) %>%
group_by(visit,room) %>%
summarise(avg = mean(value)) %>%
spread(room,avg)})
#visit_class class, methods
setClass("visit_class", slots = c(id = "numeric", visit = "numeric", room = "character", value = "numeric", timepoint = "numeric"))
setMethod("room", c(x = "visit_class"),
function(x,n){new("room_class",
id = x@id[x@room == n],
visit = x@visit[x@room == n],
room = x@room[x@room == n],
value = x@value[x@room == n],
timepoint = x@timepoint[x@room == n])})
#Room_class class, methods
setClass("room_class", slots = c(id = "numeric", visit = "numeric", room = "character", value = "numeric", timepoint = "numeric"))
setMethod("print", c(x = "room_class"),
function(x){cat(paste("ID:", unique(x@id)),"\n")
cat(paste("Visit:",unique(x@visit)),"\n")
cat(paste("Room:",unique(x@room)))})
setMethod("summary", c(object = "room_class"), function(object){new("room_summary", id = object@id, value = object@value)})
#Room_summary class, methods
setClass("room_summary", slots = c(id = "numeric", value = "numeric"))
setMethod("print", c(x = "room_summary"),
function(x){cat(paste("ID:",  unique(x@id)),"\n")
summary(x@value)})
make_LD <- function(x) {new("LongitudinalData",
id = x$id,
visit = x$visit,
room = x$room,
value = x$value,
timepoint = x$timepoint)}
make_LD(df)
ldo <- make_LD(df)
View(ldo)
class(ldo)
subject(ldo,14)
data <- read_csv("C:/Users/eejin/Desktop/oop data/data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
library(readr)
library(magrittr)
data <- read_csv("C:/Users/eejin/Desktop/oop data/data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
library(readr)
library(magrittr)
data <- read_csv("C:/Users/eejin/Desktop/oop data/data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
library(readr)
library(magrittr)
library(tidyr)
data <- read_csv("C:/Users/eejin/Desktop/oop data/data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
library(readr)
library(magrittr)
library(tidyr)
library(dplyr)
data <- read_csv("C:/Users/eejin/Desktop/oop data/data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
setwd("~/GitHub/randomstuff/coursera/practical machine learning")
train <- read.csv("pml-testing.csv")
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
head(train)
summary(test)
summary(train)
dim(train)
head(train)
treshold <- dim(train)[1] * 0.95
goodColumns <- !apply(treshold, 2, function(x) sum(is.na(x)) > treshold  || sum(x=="") > treshold)
goodColumns <- !apply(train, 2, function(x) sum(is.na(x)) > treshold  || sum(x=="") > treshold)
complete.case(t(train))
complete.cases(t(train))
complete.cases(t(test))
complete.cases(t(train)) & complete.cases(t(test))
summary(train)
View(test)
good
# Removing NA columns
good <- complete.cases(t(train)) & complete.cases(t(test))
good
good[1,3,4,5,6] <- FALSE
good[c(1,3,4,5,6)] <- FALSE
good
good <- complete.cases(t(train)) & complete.cases(t(test))
good[c(1,3,4,5,6)] <- FALSE
train <- train[,good]
test <- test[,good]
set.seed(13)
validset <- createDataPartition(train$classe, p=0.6, list=FALSE)
validation <- train[-validset,]
train <- train[validset,]
library(caret)
validset <- createDataPartition(train$classe, p=0.6, list=FALSE)
validation <- train[-validset,]
train <- train[validset,]
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
head(train)
summary(train)
dim(train)
# Removing columns with NA and columns not relevant to analysis
good <- complete.cases(t(train)) & complete.cases(t(test))
good[c(1,3,4,5,6)] <- FALSE
train <- train[,good]
test <- test[,good]
set.seed(13)
trainset <- createDataPartition(train$classe, p=0.6, list=FALSE)
validation <- train[-trainset,]
train <- train[trainset,]
library(randomForest)
randomforestmod <- randomForest(classe~., data=train)
trainpred <- predict(randomforestmod,train)
trainacc <- sum(trainpred == train$classe/length(train))
paste("Accuracy on training set =",trainacc )
library(ggplot2)
library(caret)
library(randomForest)
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
head(train)
summary(train)
dim(train)
# Removing columns with NA and columns not relevant to analysis
good <- complete.cases(t(train)) & complete.cases(t(test))
good[c(1,3,4,5,6)] <- FALSE
train <- train[,good]
test <- test[,good]
set.seed(13)
trainset <- createDataPartition(train$classe, p=0.6, list=FALSE)
validation <- train[-trainset,]
train <- train[trainset,]
randomforestmod <- randomForest(classe~., data=train)
trainpred <- predict(randomforestmod,train)
trainacc <- sum(trainpred == train$classe/length(train))
paste("Accuracy on training set =",trainacc )
head(train)
summary(train)
dim(train)
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
train$classe <- as.factor(train$classe)
test$classe <- as.factor(test$classe)
head(train)
summary(train)
dim(train)
good <- complete.cases(t(train)) & complete.cases(t(test))
good[c(1,3,4,5,6)] <- FALSE
train <- train[,good]
test <- test[,good]
head(train)
summary(train)
dim(train)
set.seed(13)
trainset <- createDataPartition(train$classe, p=0.6, list=FALSE)
validation <- train[-trainset,]
train <- train[trainset,]
randomforestmod <- randomForest(classe~., data=train)
trainpred <- predict(randomforestmod,newdata=train)
trainacc <- sum(trainpred == train$classe/length(train))
paste("Accuracy on training set =",trainacc )
validpred <- predict(randomforestmod,newdata=validation)
validacc <- sum(validpred == validation$classe/length(validation))
paste("Accuracy on validation set =",validacc )
trainpred
train$classe
dim(trainpred)
trainpred[1]
trainpred[1] == train$class[1]
trainpred == train$classe
sum(trainpred == train$classe)
trainpred <- predict(randomforestmod,newdata=train)
trainacc <- sum(trainpred == train$classe)/length(train)
paste("Accuracy on training set =",trainacc )
validpred <- predict(randomforestmod,newdata=validation)
validacc <- sum(validpred == validation$classe)/length(validation)
paste("Accuracy on validation set =",validacc )
length(train)
dim(train)[2]
dim(train)[1]
trainpred <- predict(randomforestmod,newdata=train)
trainacc <- sum(trainpred == train$classe)/dim(train)[1]
paste("Accuracy on training set =",trainacc )
validpred <- predict(randomforestmod,newdata=validation)
validacc <- sum(validpred == validation$classe)/dim(validation)[1]
paste("Accuracy on validation set =",validacc )
testpred <- predict(randomforestmod,newdata=test)
testacc <- sum(testpred == test$classe)/dim(test)[1]
paste("Accuracy on validation set =",testacc )
testpred
paste("Classifications on test set:",testpred)
paste("Classifications on test set:");testpred
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(caret)
library(randomForest)
library(ggplot2)
library(caret)
library(randomForest)
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
train$classe <- as.factor(train$classe)
test$classe <- as.factor(test$classe)
setwd("~/GitHub/randomstuff/coursera/practical machine learning")
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
train$classe <- as.factor(train$classe)
test$classe <- as.factor(test$classe)
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
train$classe <- as.factor(train$classe)
test$classe <- as.factor(test$classe)
head(train)
summary(train)
dim(train)
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
head(train)
summary(train)
dim(train)
train$classe <- as.factor(train$classe)
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
#head(train)
#summary(train)
dim(train)
train$classe <- as.factor(train$classe)
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
#head(train)
#summary(train)
dim(train)
dim(test)
train$classe <- as.factor(train$classe)
train$classe <- as.factor(train$classe)
good <- complete.cases(t(train)) & complete.cases(t(test))
good[c(1,3,4,5,6)] <- FALSE
train <- train[,good]
test <- test[,good]
train$classe <- as.factor(train$classe)
good <- complete.cases(t(train)) & complete.cases(t(test))
good[c(1,3,4,5,6)] <- FALSE
train <- train[,good]
test <- test[,good]
set.seed(13)
trainset <- createDataPartition(train$classe, p=0.6, list=FALSE)
validation <- train[-trainset,]
train <- train[trainset,]
gc()
knitr::opts_chunk$set(echo = TRUE)
data(mtcars)
head(mtcars)
names(mtcars)
summary(mtcars)
head(mtcars)
